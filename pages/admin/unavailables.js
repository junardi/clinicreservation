import Head from 'next/head';
import { useEffect, useState, useRef } from 'react';
import { Container, Row, Col, Form, Button, Table, Tabs, Tab } from 'react-bootstrap';

import { useSession } from "next-auth/react";
import GeneralLayout from "../../components/layouts/generallayout";
import { setupDate } from '../../lib/data-helper';

import Calendar from 'react-calendar';



function Admin() {

    const { data: session, status } = useSession();

    const [dateValue, onChangeDate] = useState(new Date());

    const [trigger, setTrigger] = useState(false);
    const [unavailableDates, setUnavailableDates] = useState([]);

    useEffect(() => {
        const get = async() => {
            try {
                const fetchData = await fetch('/api/unavailables', {
                  method: 'GET',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });
        
                const jsonData = await fetchData.json();
                
                const data = jsonData.data.map((data) => {
                    return setupDate(data.value);
                });

                setUnavailableDates(data);

                console.log('data is ', data);
            } catch(error) {
                console.log('error is ', error);
            }
        };

        get();
    }, [trigger]);

  
    const newDateChange = async(dateObj) => {

        //console.log(value);
        // const formattedDate = value.toISOString().split('T')[0];
        // console.log('Formatted Date:', formattedDate);

        const month = dateObj.getMonth() + 1; 
        const day = dateObj.getDate();
        const year = dateObj.getFullYear();

        const formattedDate = year + "-" + ("0" + month).slice(-2) + "-" + ("0" + day).slice(-2);
        console.log('Formatted Date:', formattedDate);

        try {
            const fetchData = await fetch('/api/unavailables', {
              method: 'POST',
              body: JSON.stringify({value: formattedDate}),
              headers: {
                'Content-Type': 'application/json'
              }
            });
    
            const jsonData = await fetchData.json();
            console.log('json data is ', jsonData);
            setTrigger(!trigger);
          
            
        } catch(error) {
            console.log('error is ', error);
            
        }
  
    };



     const disableDate = ({activeStartDate, date, view }) => {
        // console.log('active start date is ', activeStartDate);
        // console.log('date is ', setupDate(date));


        // console.log('limit is ', limit);
        // console.log('future dates is ', futureDates);
    
        // //console.log('view is ', view);
        // const count = futureDates.filter(item => item === setupDate(date)).length;
        // return limit <= count;

        const find = unavailableDates.find(item => item === setupDate(date));

        if(find) {
            return true;
        } else {
            return false;
        }      
    };


    const tileClassName = ({ date, view }) => {

        // console.log('view is ', view);
        // console.log('date is ', setupDate(date));


        // Highlight specific dates in the "month" view
        if (view === "month") {
            const find = unavailableDates.find(item => item === setupDate(date));

            if(find) {
                console.log('THERE IS FIND');
                return 'highlightedTile';
            }
        }
        return null; // No class for other tiles
    };


  
    if(session) {
        const role = session.user.role;
        const userId = session.user.userId;
        //console.log(session);

        return (
            <>
                <Head>
                    <title>Online Reservation and Appointment Management System</title>
                    <meta name="description" content="Generated by create next app" />
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>

                <Container className='unavailableContainer'>
                    <Row>
                        <h1>Doctors Schedule</h1>
                       
                        <Calendar 
                            onChange={newDateChange} 
                            tileClassName={tileClassName}
                            //tileDisabled={disableDate}
                            // minDate={new Date(year, month, dayOfTheMonth)}
                            // tileDisabled={disableDateByLimit}
                            //onClickDay={clickDay}
                        />
                        
                    </Row>
                </Container>

            </>
        )
    }

 
};


Admin.layout = GeneralLayout;
export default Admin;