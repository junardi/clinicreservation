import Head from 'next/head';
import { useEffect, useState } from 'react';
import { Container, Row, Col, Form, Button, Table, Tabs, Tab } from 'react-bootstrap';

import { useSession, getSession } from "next-auth/react";
import { useRouter } from 'next/router';
import { Fragment } from 'react';
import { toast } from 'react-toastify';
import { sendEmail } from '../../utils/email/email.util';

import { setupDate } from '../../lib/data-helper';

function AdminComponent() {


  const router = useRouter();

  const { data: session, status } = useSession();
  //console.log(session);

  // const { data: session, status } = useSession();
  // if(status === "authenticated") {
  //   console.log(session);
  // }

  // useEffect(()=>{
  //   getSession().then(session => {
  //     if(!session) {
  //       router.push('/');
  //     }
  //   })
  // }, []);

  const [reserveData, setReserveData] = useState([]);

  const [notApprovedData, setNotApprovedData] = useState([]);
  const [approvedData, setApprovedData] = useState([]);
  const [paidData, setPaidData] = useState([]);

  const [recall, setRecall] = useState(false);


  useEffect(() => {
    const getReservations = async() => {
      try {
        const fetchData = await fetch('/api/patients', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const jsonData = await fetchData.json();

        //console.log(jsonData);
        const approvedData = jsonData.data.filter((el, index) => {
          if(el.status === 'approved') {
            return el;
          }
        });
        setApprovedData(approvedData);
        //console.log(approvedData);

        const notApprovedData = jsonData.data.filter((el, index) => {
          if(el.status === 'pending') {
            return el;  
          }
        });
        setNotApprovedData(notApprovedData);
        //console.log(notApprovedData);

        const paidData = jsonData.data.filter((el, index) => {
          if(el.paid) {
            return el;  
          }
        });

        setPaidData(paidData);
        //console.log(paidData);
        
        return jsonData;
       

      } catch(error) {
        console.log(error);
        return error;
      }
    };

    getReservations();
  }, [recall]);


  const approve = async(event, data) => {
    event.preventDefault();

    data.status = 'approved';

    console.log(data);

    try {
      const fetchData = await fetch('/api/reservations', {
        method: 'PUT',
        body: JSON.stringify(data),
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const jsonData = await fetchData.json();

      console.log(jsonData);
      toast("approved.");
      const templateParams = {
        from_name: 'From CLinic', 
        to_name: data.firstName + " " + data.middleInitial + " " + data.lastName,
        to_email: data.emailAddress,
        intro_message: "Appointment Status",
        message: "Your appointment is approved"
      };

      if(data.emailAddress) {
        await sendEmail(templateParams);
      }
     
      setRecall(!recall);
    } catch(error) {
      console.log(error);
      toast("something went wrong.");
    }
  };

  const reject = async(event, data) => {
    event.preventDefault();

    data.date = setupDate(data.date);
   
    try {
      const fetchData = await fetch('/api/patients', {
        method: 'DELETE',
        body: JSON.stringify(data),
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const jsonData = await fetchData.json();

      console.log(jsonData);
      toast("Rejected.");
      const templateParams = {
        from_name: 'From CLinic', 
        to_name: data.patientName,
        to_email: data.emailAddress,
        intro_message: "Appointment Status",
        message: "Your appointment is rejected"
      };

      await sendEmail(templateParams);
      setRecall(!recall);
    } catch(error) {
      console.log(error);
      toast("something went wrong.");
    }
  };




  return (
    <>
      <Head>
        <title>Admin - Child mapping information system</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>
        <Row>
          <Col>

            <br />
            <h3>List of Appointments</h3>
            <br />


            <Tabs
              defaultActiveKey="notApproved"
              id="uncontrolled-tab-example"
              className="mb-3"
            >
              <Tab eventKey="notApproved" title="Pending Reservations">
                { 
                  notApprovedData &&
                  <Table striped hover>
                    <thead>
                      <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Middle Initial</th>
                        <th>Address</th>
                        <th>Contact Number</th>
                        <th>Gender</th>
                        <th>Age</th>
                        <th>Email</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Status</th>
                      </tr>
                    </thead>
                    <tbody>
                    {
                      notApprovedData.map((el, index) => {
                        return(
                          <tr key={index}>
                            <td>{el.firstName}</td>
                            <td>{el.lastName}</td>
                            <td>{el.middleInitial}</td>
                            
                            <td>{el.patientAddress}</td>
                            <td>{el.contactNumber}</td>
                            <td>{el.gender}</td>
                            <td>{el.age}</td>
                            <td>{el.emailAddress}</td>
                            <td>{setupDate(el.date)}</td>
                            <td>{el.time}</td>
                            <td>
                              { el.status === 'pending' &&
                                <Fragment>
                                <Button variant="primary" onClick={(evt) => approve(evt, el)}>Approve</Button>{' '}                            
                                <Button variant="danger" onClick={(evt) => reject(evt, el)}>Reject</Button>
                                </Fragment>
                              } 
                              { el.status === 'approved' &&
                                el.status
                              }
                            </td>
                           
                          </tr>
                        )
                      })
                    }
                    </tbody>
                  </Table>
                }
              </Tab>
              <Tab eventKey="approved" title="Approved Reservations">
                { 
                  approvedData &&
                  <Table striped hover>
                    <thead>
                      <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Middle Initial</th>
                        <th>Address</th>
                        <th>Contact Number</th>
                        <th>Gender</th>
                        <th>Age</th>
                        <th>Email</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Status</th>
                        <th>Action</th>
                      </tr>
                    </thead>
                    <tbody>
                    {
                      approvedData.map((el, index) => {
                        return(
                          <tr key={index}>
                            <td>{el.firstName}</td>
                            <td>{el.lastName}</td>
                            <td>{el.middleInitial}</td>
                            
                            <td>{el.patientAddress}</td>
                            <td>{el.contactNumber}</td>
                            <td>{el.gender}</td>
                            <td>{el.age}</td>
                            <td>{el.emailAddress}</td>
                            <td>{setupDate(el.date)}</td>
                            <td>{el.time}</td>
                            <td>
                              { el.status === 'pending' &&
                                <Fragment>
                                <Button variant="primary" onClick={(evt) => approve(evt, el)}>Approve</Button>{' '}                            
                                <Button variant="danger" onClick={(evt) => reject(evt, el)}>Reject</Button>
                                </Fragment>
                              } 
                              { el.status === 'approved' &&
                                el.status
                              }
                            </td>
                            <td><Button>Details</Button></td>
                          
                          </tr>
                        )
                      })
                    }
                    </tbody>
                  </Table>
                }
              </Tab>
              <Tab eventKey="paid" title="Patient Records">
                { 
                  paidData &&
                  <Table striped hover>
                    <thead>
                      <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Middle Initial</th>
                        <th>Address</th>
                        <th>Contact Number</th>
                        <th>Gender</th>
                        <th>Age</th>
                        <th>Email</th>
                        <th>Date</th>
                        <th>Time</th>
                      </tr>
                    </thead>
                    <tbody>
                    {
                      paidData.map((el, index) => {
                        return(
                          <tr key={index}>
                            <td>{el.firstName}</td>
                            <td>{el.lastName}</td>
                            <td>{el.middleInitial}</td>
                            
                            <td>{el.patientAddress}</td>
                            <td>{el.contactNumber}</td>
                            <td>{el.gender}</td>
                            <td>{el.age}</td>
                            <td>{el.emailAddress}</td>
                            <td>{setupDate(el.date)}</td>
                            <td>{el.time}</td>
                            
                          
                          </tr>
                        )
                      })
                    }
                    </tbody>
                  </Table>
                }
              </Tab>
            </Tabs>


            
            
          </Col>
        </Row>
      </Container>
      
    </>

  )

};


export default AdminComponent;